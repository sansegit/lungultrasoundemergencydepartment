from imports import *

#LIST OF CLASSIFIERS WE WANT TO TEST

# Reduced subset for debugging
'''
names = [   
    "Nearest Neighbors_01",
    "Nearest Neighbors_02",
    "Nearest Neighbors_03",
    "Nearest Neighbors_04",
    "Nearest Neighbors_05",
    "Nearest Neighbors_06",
    "Nearest Neighbors_07",
    "Nearest Neighbors_08",
    "Naive Bayes_01",
    "Naive Bayes_02",
    "Naive Bayes_03",
    "Naive Bayes_04",
    "QDA_01",
    ]
'''
names = [
    "Nearest Neighbors_01",
    "Nearest Neighbors_02",
    "Nearest Neighbors_03",
    "Nearest Neighbors_04",
    "Nearest Neighbors_05",
    "Nearest Neighbors_06",
    "Nearest Neighbors_07",
    "Nearest Neighbors_08",
    "SVM_01",
    "SVM_02",
    "SVM_03",
    "SVM_04",
    "SVM_05",    
    "SVM_06",
    "SVM_07",
    "SVM_08",
    "SVM_09",
    "SVM_10",
    "SVM_11",
    "SVM_12",
    "SVM_13",
    "SVM_14",
    "SVM_15",
    "SVM_16",
    "SVM_17",
    "SVM_18",
    "SVM_19",
    "SVM_20",
    "SVM_21",
    "SVM_22",
    "SVM_23",
    "SVM_24",
    "SVM_25",
    "SVM_26",
    "SVM_27",
    "SVM_28",
    "SVM_29",
    "SVM_30", 
    "Gaussian Process_01",
    "Gaussian Process_02",
    "Gaussian Process_03",
    "Gaussian Process_04",
    "Gaussian Process_05",
    "Decision Tree_01",
    "Decision Tree_02",
    "Decision Tree_03",
    "Decision Tree_04",
    "Decision Tree_05",
    "Decision Tree_06",
    "Decision Tree_07",
    "Decision Tree_08",
    "Random Forest_01",
    "Random_Forest_02",
    "Random_Forest_03",
    "Random_Forest_04",
    "Random_Forest_05",
    "Random_Forest_06",
    "Random_Forest_07",
    "Random_Forest_08",
    "Random Forest_09",
    "Random_Forest_10",    
    "Random Forest_11",
    "Random_Forest_12",
    "Random_Forest_13",
    "Random_Forest_14",
    "Random_Forest_15",
    "Random_Forest_16",
    "Random_Forest_17",
    "Random_Forest_18",
    "Random Forest_19",
    "Random_Forest_20",    
    "Neural Net_01",
    "Neural Net_02",
    "Neural Net_03",
    "Neural Net_04",
    "Neural Net_05",
    "Neural Net_06",
    "Neural Net_07",
    "Neural Net_08",
    "Neural Net_09",
    "Neural Net_10",
    "Neural Net_11",
    "Neural Net_12",
    "Neural Net_13",
    "Neural Net_14",
    "Neural Net_15",
    "Neural Net_16",
    "Neural Net_17",
    "Neural Net_18",
    "Neural Net_19",
    "Neural Net_20",
    "Neural Net_21",
    "Neural Net_22",
    "Neural Net_23",
    "Neural Net_24",   
    "AdaBoost_01",
    "AdaBoost_02",
    "AdaBoost_03",
    "AdaBoost_04",
    "AdaBoost_05",
    "AdaBoost_06",
    "AdaBoost_07",
    "AdaBoost_08",
    "AdaBoost_09",
    "AdaBoost_10",
    "AdaBoost_11",
    "AdaBoost_12",
    "AdaBoost_13",
    "AdaBoost_14",
    "AdaBoost_15",
    "AdaBoost_16",
    "AdaBoost_17",
    "AdaBoost_18",
    "Naive Bayes_01",
    "Naive Bayes_02",
    "Naive Bayes_03",
    "Naive Bayes_04",
    "QDA_01",
    "Logistic_01",
    "Logistic_02",
    "Logistic_03",
    "Logistic_04",    
    "Logistic_05",
    "Logistic_06",    
    "Logistic_07",
    "Logistic_08",
    "Logistic_09",
    "Ridge_01",
    "Ridge_02",
    "Ridge_03",
    "Ridge_04",
    "Ridge_05",
    "Ridge_06",    
    "Bagging_01",
    "Bagging_02",
    "Bagging_03",
    "Bagging_04",
    "Gradient_01",
    "Gradient_02",
    "Gradient_03",
    "Gradient_04",
    "Gradient_05",
    "Gradient_06",
    "Gradient_07",
    "Gradient_08",
    "Gradient_09",
    "Gradient_10",
    "Gradient_11",
    "Gradient_12",
    "Gradient_13",
    "Gradient_14",
    "Gradient_15",
    "Gradient_16",
    "Gradient_17",
    "Gradient_18",
    "Gradient_19",
    "Gradient_20",
    "Gradient_21",
    "Gradient_22",
    "Gradient_23",
    "Gradient_24",
    "Gradient_25",
    "Gradient_26",
    "Gradient_27",
    "Gradient_28",
    "Gradient_29",
    "Gradient_30",
    "Gradient_31",
    "Gradient_32",
    "Gradient_33",
    "Gradient_34",
    "Gradient_35",
    "Gradient_36",
    "Gradient_37",
    "Gradient_38",
    "Gradient_39",
    "Gradient_40",
    "Gradient_41",
    "Gradient_42",
    "Gradient_43",
    "Gradient_44",
    "Gradient_45",
    "Gradient_46",
    "Gradient_47",
    "Gradient_48",
    "Gradient_49",
    "Gradient_50", 
    "Gradient_51",
    "Gradient_52",
    "Gradient_53",
    "Gradient_54",     
]

#mscore = make_scorer(score_cor_calculator, greater_is_better = True)
'''
classifiers = [
    KNeighborsClassifier(3, weights = 'uniform'),
    KNeighborsClassifier(6, weights = 'uniform'),
    KNeighborsClassifier(12, weights = 'uniform'),
    KNeighborsClassifier(24, weights = 'uniform'),
    KNeighborsClassifier(3, weights = 'distance'),
    KNeighborsClassifier(6, weights = 'distance'),
    KNeighborsClassifier(12, weights = 'distance'),
    KNeighborsClassifier(24, weights = 'distance'),
    GaussianNB(),
    MultinomialNB(),
    ComplementNB(),
    BernoulliNB(),
    QuadraticDiscriminantAnalysis(),
    ]


'''

def generateClassifiers(mrandom_state):

    #https://medium.com/swlh/the-hyperparameter-cheat-sheet-770f1fed32ff
    classifiers = [
        KNeighborsClassifier(3, weights = 'uniform'),
        KNeighborsClassifier(6, weights = 'uniform'),
        KNeighborsClassifier(12, weights = 'uniform'),
        KNeighborsClassifier(24, weights = 'uniform'),
        KNeighborsClassifier(3, weights = 'distance'),
        KNeighborsClassifier(6, weights = 'distance'),
        KNeighborsClassifier(12, weights = 'distance'),
        KNeighborsClassifier(24, weights = 'distance'),
        SVC(kernel="linear", C=0.1, random_state = mrandom_state),
        SVC(kernel="linear", C=1, random_state = mrandom_state),
        SVC(kernel="linear", C=10, random_state = mrandom_state),
        SVC(kernel="linear", C=100, random_state = mrandom_state),
        SVC(kernel="linear", C=1000, random_state = mrandom_state),    
        SVC(kernel="poly", C=0.1, random_state = mrandom_state),
        SVC(kernel="poly", C=1, random_state = mrandom_state),
        SVC(kernel="poly", C=10, random_state = mrandom_state),
        SVC(kernel="poly", C=100, random_state = mrandom_state),
        SVC(kernel="poly", C=1000, random_state = mrandom_state),
        SVC(kernel="sigmoid", C=0.1, random_state = mrandom_state),
        SVC(kernel="sigmoid", C=1, random_state = mrandom_state),
        SVC(kernel="sigmoid", C=10, random_state = mrandom_state),
        SVC(kernel="sigmoid", C=100, random_state = mrandom_state),
        SVC(kernel="sigmoid", C=1000, random_state = mrandom_state),
        SVC(kernel="rbf", gamma=2, C=0.01, random_state = mrandom_state), # they all use adam optimizer    
        SVC(kernel="rbf", gamma=2, C=0.1, random_state = mrandom_state), # they all use adam optimizer    
        SVC(kernel="rbf", gamma=2, C=1, random_state = mrandom_state), # they all use adam optimizer    
        SVC(kernel="rbf", gamma=2, C=10, random_state = mrandom_state), # they all use adam optimizer    
        SVC(kernel="rbf", gamma=2, C=100, random_state = mrandom_state), # they all use adam optimizer    
        SVC(kernel="rbf", gamma=2, C=1000, random_state = mrandom_state), # they all use adam optimizer    
        SVC(kernel="rbf", gamma=.5, C=0.1, random_state = mrandom_state), # they all use adam optimizer    
        SVC(kernel="rbf", gamma=.5, C=1, random_state = mrandom_state), # they all use adam optimizer    
        SVC(kernel="rbf", gamma=.5, C=10, random_state = mrandom_state), # they all use adam optimizer    
        SVC(kernel="rbf", gamma=.5, C=100, random_state = mrandom_state), # they all use adam optimizer    
        SVC(kernel="rbf", gamma=.5, C=1000, random_state = mrandom_state), # they all use adam optimizer    
        SVC(kernel="rbf", C=0.1, random_state = mrandom_state), # they all use adam optimizer  
        SVC(kernel="rbf", C=1, random_state = mrandom_state), # they all use adam optimizer    
        SVC(kernel="rbf", C=10, random_state = mrandom_state), # they all use adam optimizer    
        SVC(kernel="rbf", C=100, random_state = mrandom_state), # they all use adam optimizer    
        SVC(kernel="rbf", C=1000, random_state = mrandom_state), # they all use adam optimizer    
        GaussianProcessClassifier(1.0 * RBF(1.0), random_state = mrandom_state),
        GaussianProcessClassifier(1.0 * DotProduct(), random_state = mrandom_state),
        GaussianProcessClassifier(1.0 * Matern(), random_state = mrandom_state),
        GaussianProcessClassifier(1.0 * RationalQuadratic(), random_state = mrandom_state),
        GaussianProcessClassifier(1.0 * WhiteKernel(), random_state = mrandom_state),
        DecisionTreeClassifier(max_depth=5,criterion="gini", random_state = mrandom_state),
        DecisionTreeClassifier(max_depth=10,criterion="gini", random_state = mrandom_state),
        DecisionTreeClassifier(max_depth=20,criterion="gini", random_state = mrandom_state),
        DecisionTreeClassifier(max_depth=40,criterion="gini", random_state = mrandom_state),
        DecisionTreeClassifier(max_depth=5,criterion="entropy", random_state = mrandom_state),
        DecisionTreeClassifier(max_depth=10,criterion="entropy", random_state = mrandom_state),
        DecisionTreeClassifier(max_depth=20,criterion="entropy", random_state = mrandom_state),
        DecisionTreeClassifier(max_depth=40,criterion="entropy", random_state = mrandom_state),
        RandomForestClassifier(max_depth=None, n_estimators=10, random_state = mrandom_state),
        RandomForestClassifier(max_depth=None, n_estimators=20, random_state = mrandom_state),
        RandomForestClassifier(max_depth=None, n_estimators=40, random_state = mrandom_state),
        RandomForestClassifier(max_depth=None, n_estimators=80, random_state = mrandom_state),
        RandomForestClassifier(max_depth=5, n_estimators=10, random_state = mrandom_state),
        RandomForestClassifier(max_depth=5, n_estimators=20, random_state = mrandom_state),
        RandomForestClassifier(max_depth=5, n_estimators=40, random_state = mrandom_state),
        RandomForestClassifier(max_depth=5, n_estimators=80, random_state = mrandom_state),
        RandomForestClassifier(max_depth=10, n_estimators=10, random_state = mrandom_state),
        RandomForestClassifier(max_depth=10, n_estimators=20, random_state = mrandom_state),
        RandomForestClassifier(max_depth=10, n_estimators=40, random_state = mrandom_state),
        RandomForestClassifier(max_depth=10, n_estimators=80, random_state = mrandom_state),
        RandomForestClassifier(max_depth=20, n_estimators=10, random_state = mrandom_state),
        RandomForestClassifier(max_depth=20, n_estimators=20, random_state = mrandom_state),
        RandomForestClassifier(max_depth=20, n_estimators=40, random_state = mrandom_state),
        RandomForestClassifier(max_depth=20, n_estimators=80, random_state = mrandom_state),    
        RandomForestClassifier(max_depth=40, n_estimators=10, random_state = mrandom_state),
        RandomForestClassifier(max_depth=40, n_estimators=20, random_state = mrandom_state),
        RandomForestClassifier(max_depth=40, n_estimators=40, random_state = mrandom_state),
        RandomForestClassifier(max_depth=40, n_estimators=80, random_state = mrandom_state),  
        MLPClassifier(hidden_layer_sizes = (5,), alpha=0.001, max_iter=1000, random_state = mrandom_state),
        MLPClassifier(hidden_layer_sizes = (5,), alpha=0.01, max_iter=1000, random_state = mrandom_state),
        MLPClassifier(hidden_layer_sizes = (5,), alpha=0.1, max_iter=1000, random_state = mrandom_state),
        MLPClassifier(hidden_layer_sizes = (5,), alpha=1, max_iter=1000, random_state = mrandom_state),
        MLPClassifier(hidden_layer_sizes = (10,), alpha=0.001, max_iter=1000, random_state = mrandom_state),
        MLPClassifier(hidden_layer_sizes = (10,), alpha=0.01, max_iter=1000, random_state = mrandom_state),
        MLPClassifier(hidden_layer_sizes = (10,), alpha=0.1, max_iter=1000, random_state = mrandom_state),
        MLPClassifier(hidden_layer_sizes = (10,), alpha=1, max_iter=1000, random_state = mrandom_state),    
        MLPClassifier(hidden_layer_sizes = (20,), alpha=0.001, max_iter=1000, random_state = mrandom_state),
        MLPClassifier(hidden_layer_sizes = (20,), alpha=0.01, max_iter=1000, random_state = mrandom_state),
        MLPClassifier(hidden_layer_sizes = (20,), alpha=0.1, max_iter=1000, random_state = mrandom_state),
        MLPClassifier(hidden_layer_sizes = (20,), alpha=1, max_iter=1000, random_state = mrandom_state), # they all use adam optimizer
        MLPClassifier(hidden_layer_sizes = (5,2), alpha=0.001, max_iter=1000, random_state = mrandom_state),
        MLPClassifier(hidden_layer_sizes = (5,2), alpha=0.01, max_iter=1000, random_state = mrandom_state),
        MLPClassifier(hidden_layer_sizes = (5,2), alpha=0.1, max_iter=1000, random_state = mrandom_state),
        MLPClassifier(hidden_layer_sizes = (5,2), alpha=1, max_iter=1000, random_state = mrandom_state),
        MLPClassifier(hidden_layer_sizes = (10,5,2), alpha=0.001, max_iter=1000, random_state = mrandom_state),
        MLPClassifier(hidden_layer_sizes = (10,5,2), alpha=0.01, max_iter=1000, random_state = mrandom_state),
        MLPClassifier(hidden_layer_sizes = (10,5,2), alpha=0.1, max_iter=1000, random_state = mrandom_state),
        MLPClassifier(hidden_layer_sizes = (10,5,2), alpha=1, max_iter=1000, random_state = mrandom_state),    
        MLPClassifier(hidden_layer_sizes = (20,5,2), alpha=0.001, max_iter=1000, random_state = mrandom_state),
        MLPClassifier(hidden_layer_sizes = (20,10,5,2), alpha=0.01, max_iter=1000, random_state = mrandom_state),
        MLPClassifier(hidden_layer_sizes = (20,10,5,2), alpha=0.1, max_iter=1000, random_state = mrandom_state),
        MLPClassifier(hidden_layer_sizes = (20,10,5,2), alpha=1, max_iter=1000, random_state = mrandom_state),    
        AdaBoostClassifier(learning_rate = 0.01, n_estimators = 20, random_state = mrandom_state),
        AdaBoostClassifier(learning_rate = 0.02, n_estimators = 20, random_state = mrandom_state),
        AdaBoostClassifier(learning_rate = 0.05, n_estimators = 20, random_state = mrandom_state),
        AdaBoostClassifier(learning_rate = 0.1, n_estimators = 20, random_state = mrandom_state),
        AdaBoostClassifier(learning_rate = 0.2, n_estimators = 20, random_state = mrandom_state),
        AdaBoostClassifier(learning_rate = 0.5, n_estimators = 20, random_state = mrandom_state),
        AdaBoostClassifier(learning_rate = 0.01, n_estimators = 50, random_state = mrandom_state),
        AdaBoostClassifier(learning_rate = 0.02, n_estimators = 50, random_state = mrandom_state),
        AdaBoostClassifier(learning_rate = 0.05, n_estimators = 50, random_state = mrandom_state),
        AdaBoostClassifier(learning_rate = 0.1, n_estimators = 50, random_state = mrandom_state),
        AdaBoostClassifier(learning_rate = 0.2, n_estimators = 50, random_state = mrandom_state),
        AdaBoostClassifier(learning_rate = 0.5, n_estimators = 50, random_state = mrandom_state),    
        AdaBoostClassifier(learning_rate = 0.01, n_estimators = 100, random_state = mrandom_state),
        AdaBoostClassifier(learning_rate = 0.02, n_estimators = 100, random_state = mrandom_state),
        AdaBoostClassifier(learning_rate = 0.05, n_estimators = 100, random_state = mrandom_state),
        AdaBoostClassifier(learning_rate = 0.1, n_estimators = 100, random_state = mrandom_state),
        AdaBoostClassifier(learning_rate = 0.2, n_estimators = 100, random_state = mrandom_state),
        AdaBoostClassifier(learning_rate = 0.5, n_estimators = 100, random_state = mrandom_state),
        GaussianNB(),
        MultinomialNB(),
        ComplementNB(),
        BernoulliNB(),
        QuadraticDiscriminantAnalysis(),
        LogisticRegression(solver = 'newton-cg', C = 0.1, random_state = mrandom_state),
        LogisticRegression(solver = 'newton-cg', C = 1, random_state = mrandom_state),
        LogisticRegression(solver = 'newton-cg', C = 10, random_state = mrandom_state),
        LogisticRegression(solver = 'lbfgs', C = 0.1, random_state = mrandom_state),
        LogisticRegression(solver = 'lbfgs', C = 1, random_state = mrandom_state),
        LogisticRegression(solver = 'lbfgs', C = 10, random_state = mrandom_state),
        LogisticRegression(solver = 'liblinear', C = 0.1, random_state = mrandom_state),
        LogisticRegression(solver = 'liblinear', C = 1, random_state = mrandom_state),
        LogisticRegression(solver = 'liblinear', C = 10, random_state = mrandom_state),
        RidgeClassifier(alpha = 0.1, random_state = mrandom_state),
        RidgeClassifier(alpha = 1, random_state = mrandom_state),
        RidgeClassifier(alpha = 10, random_state = mrandom_state),
        RidgeClassifier(alpha = 20, random_state = mrandom_state),
        RidgeClassifier(alpha = 50, random_state = mrandom_state),
        RidgeClassifier(alpha = 100, random_state = mrandom_state),
        BaggingClassifier(n_estimators = 10, random_state = mrandom_state),
        BaggingClassifier(n_estimators = 20, random_state = mrandom_state),
        BaggingClassifier(n_estimators = 40, random_state = mrandom_state),
        BaggingClassifier(n_estimators = 80, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 10, learning_rate = 0.01,  max_depth = 5, subsample=1, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 10, learning_rate = 0.1,  max_depth = 5, subsample=1, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 10, learning_rate = 1,  max_depth = 5, subsample=1, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 30, learning_rate = 0.01,  max_depth = 5, subsample=1, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 30, learning_rate = 0.1,  max_depth = 5, subsample=1, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 30, learning_rate = 1,  max_depth = 5, subsample=1, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 80, learning_rate = 0.01,  max_depth = 5, subsample=1, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 80, learning_rate = 0.1,  max_depth = 5, subsample=1, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 80, learning_rate = 1,  max_depth = 5, subsample=1, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 10, learning_rate = 0.01,  max_depth = 15, subsample=1, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 10, learning_rate = 0.1,  max_depth = 15, subsample=1, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 10, learning_rate = 1,  max_depth = 15, subsample=1, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 30, learning_rate = 0.01,  max_depth = 15, subsample=1, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 30, learning_rate = 0.1,  max_depth = 15, subsample=1, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 30, learning_rate = 1,  max_depth = 15, subsample=1, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 80, learning_rate = 0.01,  max_depth = 15, subsample=1, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 80, learning_rate = 0.1,  max_depth = 15, subsample=1, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 80, learning_rate = 1,  max_depth = 15, subsample=1, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 10, learning_rate = 0.01,  max_depth = 30, subsample=1, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 10, learning_rate = 0.1,  max_depth = 30, subsample=1, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 10, learning_rate = 1,  max_depth = 30, subsample=1, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 30, learning_rate = 0.01,  max_depth = 30, subsample=1, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 30, learning_rate = 0.1,  max_depth = 30, subsample=1, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 30, learning_rate = 1,  max_depth = 30, subsample=1, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 80, learning_rate = 0.01,  max_depth = 30, subsample=1, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 80, learning_rate = 0.1,  max_depth = 30, subsample=1, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 80, learning_rate = 1,  max_depth = 30, subsample=1, random_state = mrandom_state),    
        GradientBoostingClassifier(n_estimators = 10, learning_rate = 0.01,  max_depth = 5, subsample=0.5, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 10, learning_rate = 0.1,  max_depth = 5, subsample=0.5, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 10, learning_rate = 1,  max_depth = 5, subsample=0.5, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 30, learning_rate = 0.01,  max_depth = 5, subsample=0.5, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 30, learning_rate = 0.1,  max_depth = 5, subsample=0.5, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 30, learning_rate = 1,  max_depth = 5, subsample=0.5, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 80, learning_rate = 0.01,  max_depth = 5, subsample=0.5, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 80, learning_rate = 0.1,  max_depth = 5, subsample=0.5, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 80, learning_rate = 1,  max_depth = 5, subsample=0.5, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 10, learning_rate = 0.01,  max_depth = 15, subsample=0.5, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 10, learning_rate = 0.1,  max_depth = 15, subsample=0.5, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 10, learning_rate = 1,  max_depth = 15, subsample=0.5, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 30, learning_rate = 0.01,  max_depth = 15, subsample=0.5, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 30, learning_rate = 0.1,  max_depth = 15, subsample=0.5, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 30, learning_rate = 1,  max_depth = 15, subsample=0.5, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 80, learning_rate = 0.01,  max_depth = 15, subsample=0.5, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 80, learning_rate = 0.1,  max_depth = 15, subsample=0.5, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 80, learning_rate = 1,  max_depth = 15, subsample=0.5, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 10, learning_rate = 0.01,  max_depth = 30, subsample=0.5, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 10, learning_rate = 0.1,  max_depth = 30, subsample=0.5, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 10, learning_rate = 1,  max_depth = 30, subsample=0.5, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 30, learning_rate = 0.01,  max_depth = 30, subsample=0.5, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 30, learning_rate = 0.1,  max_depth = 30, subsample=0.5, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 30, learning_rate = 1,  max_depth = 30, subsample=0.5, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 80, learning_rate = 0.01,  max_depth = 30, subsample=0.5, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 80, learning_rate = 0.1,  max_depth = 30, subsample=0.5, random_state = mrandom_state),
        GradientBoostingClassifier(n_estimators = 80, learning_rate = 1,  max_depth = 30, subsample=0.5, random_state = mrandom_state), 
    ]

    return classifiers